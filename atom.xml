<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[落落无尘]]></title>
  <subtitle><![CDATA[闲看庭前花开花落]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://weixinfu.com//"/>
  <updated>2015-08-02T07:04:56.000Z</updated>
  <id>http://weixinfu.com//</id>
  
  <author>
    <name><![CDATA[Jezhee]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ScrollView嵌套GridView的处理]]></title>
    <link href="http://weixinfu.com/2015/08/01/embedded_scrollview/"/>
    <id>http://weixinfu.com/2015/08/01/embedded_scrollview/</id>
    <published>2015-08-01T06:54:00.000Z</published>
    <updated>2015-08-02T07:04:56.000Z</updated>
    <content type="html"><![CDATA[<p>在项目里面，有一个页面，整体是一个ScrollView，展示的是一个配置页面，其中一个子控件是一张包含多个缩略图的大图。 近期，策划提出一个新需求，要把原本这个整张的缩略图拆开为一张张的小图，以便单独响应点击事件。初一看，一个GridView替上去不就完事了嘛，再改改GridView的OnMeasure，让它的高度自适应放到ScrollView里面，这活似乎就完成的妥妥的了。</p>
<p>但紧接着，奇怪的事情发生了，如果gridview里元素比较少时，表现正常，但如果元素较多，ScrollView可以滚动的时候，就发现每次进入这个Activity，都是定位到最底部，如果元素更多一点，位置则固定在了GridView的顶部。看了半天代码，我没有做scrollTo的操作啊，再把其他不相干的代码回滚，还是无效。在我的项目里面，ScrollView套GridView还有另外一个地方，但那里表现的好好的，开始那里GridView是在顶上，正常，我想，那把GridView放到最底下再试试，x，还是正常。</p>
<p>郁闷了，没辙，只好google一下。很快，找到解决办法了，<code>GridView#setFcous(false)</code>。一试，还真可以。这我就奇怪了，跟这有毛线关系？跟踪代码看看吧。</p>
<p>要滚动到GridView位置，肯定会调用到scrollTo吧，和setFocus有关系，肯定会有requestFocus的地方吧，那就在这两个地方下断点，看看调用堆栈。果然，原因立马就找到了。首先，ScrollView布局完成后，会调用requestFocus，跟踪View#requestFocu的代码，一路往下调用了：</p>
<blockquote>
<p>private boolean requestFocusNoSearch(int direction, Rect previouslyFocusedRect);</p>
<p>void handleFocusGainInternal(int direction, Rect previouslyFocusedRect);</p>
<p>ScrollView#requestChildFocus(View child, View focused);</p>
</blockquote>
<p>答案就在requestChildFocus这个函数里面：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动到请求focus的子控件处。</span></span><br><span class="line"><span class="keyword">if</span> (!mIsLayoutDirty) &#123;</span><br><span class="line">    scrollToChild(focused); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// The child may not be laid out yet, we can't compute the scroll yet</span></span><br><span class="line">    mChildToScrollTo = focused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实也很好理解，就像你一个页面上放了一个EditText，当进入这个页面时，肯定会希望系统滚动到你的输入框这里。</p>
<p>剩下另外一个问题了：为什么另外一个页面把GridView放到最底下了，它却没有跟着滑下去呢？答案也很好找，因为处理就在挨着requestChildFocus这个函数下面的这个函数里。先看说明：</p>
<blockquote>
<p>When looking for focus in children of a scroll view, need to be a little more careful not to give focus to something that is scrolled off screen. This is more expensive than the default android.view.ViewGroupimplementation, otherwise this behavior might have been made the default.<br>protected boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect);</p>
</blockquote>
<p>其中有这样一个判断：if (isOffScreen(nextFocus)) return false;<br>验证一下，把在最底下的GridView放到中间来，再进去，果然就滚到GridView的位置了。</p>
<p>再想一想，既然是这样的原因，那其实只要在ScrollView里面放能获取Focus的控件，都会有这个问题，比如ListView，EditText等等，ScrollView会定位到它找到的第一个Focusable Child。<br>衍生一下，在解决问题的过程中，我还发现如果在初始化的时候如果先初始化GridView，设好adapter，然后在初始化adapter的数据源，且不调用BaseAdapter#notifyDataSetChanged,也不会有问题，为啥呢？答案在BaseAdapter的setAdapter函数里面，其中会有checkFocus，如果adapter getCount返回为0，GridView不能获得焦点。而GridView在layout时，它的数据源又已经有了，所以也能够正常的把所有元素布局和绘制出来。当然了，如果后面有数据改动，那么立马就会被打回原形。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在项目里面，有一个页面，整体是一个ScrollView，展示的是一个配置页面，其中一个子控件是一张包含多个缩略图的大图。 近期，策划提出一个新需求，要把原本这个整张的缩略图拆开为一张张的小图，以便单独响应点击事件。初一看，一个GridView替上去不就完事了嘛，再改改Gri]]>
    </summary>
    
      <category term="UI" scheme="http://weixinfu.com/tags/UI/"/>
    
      <category term="android" scheme="http://weixinfu.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[支付宝后台不死的黑科技]]></title>
    <link href="http://weixinfu.com/2015/07/28/black_technology_in_alipay/"/>
    <id>http://weixinfu.com/2015/07/28/black_technology_in_alipay/</id>
    <published>2015-07-28T13:13:17.000Z</published>
    <updated>2015-08-01T14:48:19.000Z</updated>
    <content type="html"><![CDATA[<p>近期支付宝升级到了9.0，除了加入微信功能外，还新增了金钟罩功能，不要说普通的各种加速球，火箭神马的不能杀死他外，连格外牛逼的绿色守护也奈何不了他。在绿色守护里面，支付宝始终显示为“服务正在被 支付宝 使用”，不会自动休眠，恼火死了。那么问题来了，他是怎么做到的呢？<br><a id="more"></a></p>
<h1 id="支付宝干了啥？">支付宝干了啥？</h1><p>这就是支付宝在绿色守护里的状态，它一直处在不会被自动休眠的这个category里面。不要问我第一个是啥，后面会有。<br><img src="http://7xkqab.com1.z0.glb.clouddn.com/sneaky_alipay.png" alt="sneaky_alipay"></p>
<p>我们知道，Android有一个oom的机制，系统会根据进程的优先级，给每个进程一个oom权重值，当系统内存紧张时，系统会根据这个优先级去选择将哪些进程杀掉，以腾出空间保证更高优先级的进程能正常运行。要想让进程长期存活，提高优先级是个不二之选。这个可以在adb中，通过以下命令查看：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su cat /proc/pid/oom_adj</span><br></pre></td></tr></table></figure>
<p>这个值越小，说明进程的优先级越高，越不容易被进程kill掉。通常如果是负数，表示该进程为系统进程，肯定不会被杀掉，如果是0，表示是前台进程，即当前用户正在操作的进程，除非万不得已，也不会被杀掉，1则表示是可见进程，通常表示有一个前台服务，会再通知栏有一个划不掉的通知，比如放歌，下载文件什么的。再增大，则优先级逐渐降低，顺序为服务进程，缓存进程，空进程等等。</p>
<p>因此首先，我们来查看支付宝进程的oom_adj。不出意料，其值很高：1。但这又在意料之外，因为支付宝既没有添加系统服务，也没有常驻通知栏，也没有显示弹窗啊。不过既然情况已经这样了，那我们还是看一下他的服务状态吧：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">shell@NX505J:/ $ dumpsys activity services com.eg.android.AlipayGphone</span><br><span class="line"></span><br><span class="line">* ServiceRecord&#123;<span class="number">17</span>d6e8a5 u0 com.eg.android.AlipayGphone/com.alipay.android.launcher.service.LauncherService<span class="variable">$InnerService</span>&#125;</span><br><span class="line">    intent=&#123;cmp=com.eg.android.AlipayGphone/com.alipay.android.launcher.service.LauncherService<span class="variable">$InnerService</span>&#125;</span><br><span class="line">    packageName=com.eg.android.AlipayGphone</span><br><span class="line">    processName=com.eg.android.AlipayGphone</span><br><span class="line">    baseDir=/data/app/com.eg.android.AlipayGphone-<span class="number">2</span>/base.apk</span><br><span class="line">    dataDir=/data/data/com.eg.android.AlipayGphone</span><br><span class="line">    app=ProcessRecord&#123;<span class="number">38365</span>c98 <span class="number">14176</span>:com.eg.android.AlipayGphone/u0a66&#125;</span><br><span class="line">    isForeground=<span class="literal">true</span> foregroundId=<span class="number">168816881</span> foregroundNoti=Notification(pri=<span class="number">0</span> contentView=com.eg.android.AlipayGphone/<span class="number">0</span>x1090077 vibrate=null sound=null defaults=<span class="number">0</span>x0 flags=<span class="number">0</span>x40 color=<span class="number">0</span>xff00bcd4 vis=PRIVATE)</span><br><span class="line">    createTime=-<span class="number">19</span>m10s188ms startingBgTimeout=-<span class="number">18</span>m55s186ms</span><br><span class="line">    lastActivity=-<span class="number">19</span>m10s188ms restartTime=-<span class="number">19</span>m10s188ms createdFromFg=<span class="literal">false</span></span><br><span class="line">    startRequested=<span class="literal">true</span> delayedStop=<span class="literal">false</span> stopIfKilled=<span class="literal">true</span> callStart=<span class="literal">true</span> lastStartId=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>原来真有一个前台服务！</p>
<p>这不科学！Service的startForeground函数是要提供一个Notification参数的啊。查资料麻烦，还不如直接反编译支付宝的代码来得快。知道了这个service的名字，我们就可以直捣黄龙了。在LauncherService里面，我们找到了如下代码：</p>
<p><img src="http://7xkqab.com1.z0.glb.clouddn.com/sneaky_foreground_service.png" alt="sneaky_foreground_service"></p>
<p>这是一段开启前台服务的代码，针对不同api，18一下直接简单粗暴的给了一个空的notification，并没有用到上面抓到的InnerService。当然，打开adb看一看，18一下确实就LauncherService自己在负责前台。18以上，则另行处理。试了试，18一下这么干，还真的可以。在用这个老版本手机的时候，一并发现原来好多的应用都是这么干的，什么豌豆荚啦，369手机助手神马的，好吧，算我孤陋寡闻了。但18以上的这段代码没有看太明白，于是，想打开他的InnerService看看到底有什么鬼。然而让我失望的是，InnerService里面并没有开启前台服务的代码，而是把主流程给隐藏在了onStartCommand的一个包裹函数中。这里他用到了aspectj框架，在onStartCommand上做了一个切点，那么具体开启前台服务的流程肯定就在这个切点里面了。但是，但是，尼玛的，我看不懂aspectj啊，跟也跟不过去。没办法，只好绕回来，去google了。幸好幸好，让我找到了方法，看上去，也是和支付宝的思路是一样，</p>
<h1 id="android的漏洞在哪？">android的漏洞在哪？</h1><p>原来，google在4.3的时候终于发现有太多流氓应用，为了提高优先级，开启了前台服务，但又不想让用户知道，因此需要不显示通知栏。于是找到了android在开启前台服务时候的一个漏洞，给一个非法的Notification参数，让系统先把ServiceRecord里面的isForeground标记给打上，然后等到显示通知栏时，发现参数并不合法，android于是什么也不干，就不显示通知栏提醒了。</p>
<p>当一票app都这么干的时候，google觉得不能忍了，于是在<code>ServiceRecord</code>的<code>postNotification</code>函数里面里面，我们看到了如下代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    if (localForegroundNoti.icon == 0) &#123;</span><br><span class="line">        // It is not correct for the caller to supply a notification</span><br><span class="line">		icon, but this used to be able to slip through, so for</span><br><span class="line">		those dirty apps give it the app's icon.</span><br><span class="line">        localForegroundNoti.icon = appInfo.icon;</span><br><span class="line"></span><br><span class="line">        // Do not allow apps to present a sneaky invisible content view either.</span><br><span class="line">        localForegroundNoti.contentView = null;</span><br><span class="line">        localForegroundNoti.bigContentView = null;</span><br><span class="line">        CharSequence appName = appInfo.loadLabel(</span><br><span class="line">			ams.mContext.getPackageManager());</span><br><span class="line">        if (appName == null) &#123;</span><br><span class="line">            appName = appInfo.packageName;</span><br><span class="line">        &#125;</span><br><span class="line">        ctx = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            ctx = ams.mContext.createPackageContext(</span><br><span class="line">                appInfo.packageName, 0);</span><br><span class="line">        Intent runningIntent = new Intent(</span><br><span class="line">            Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</span><br><span class="line">        runningIntent.setData(Uri.fromParts("package",</span><br><span class="line">            appInfo.packageName, null));</span><br><span class="line">        PendingIntent pi = PendingIntent.getActivity(ams.mContext, 0,</span><br><span class="line">            runningIntent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">        localForegroundNoti.setLatestEventInfo(ctx,</span><br><span class="line">            ams.mContext.getString(</span><br><span class="line">                com.android.internal.R.string</span><br><span class="line">					.app_running_notification_title,</span><br><span class="line">                        appName),</span><br><span class="line">        ams.mContext.getString(</span><br><span class="line">             com.android.internal.R.string</span><br><span class="line">				.app_running_notification_text,</span><br><span class="line">             appName),</span><br><span class="line">            pi);</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        localForegroundNoti.icon = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>里面可以看到，android再也不让你欺骗系统了，是前台服务就必须要显示一个通知栏提醒。于是，像豌豆荚，360这些，在高版本系统上也没有前台服务了，默默的再后台，然后等着被干掉。</p>
<p>既然如此，那支付宝是怎么做到的呢？真实应了那句话，流氓不可怕，就怕流氓有文化。大门给关上了，那我就翻窗户吧。</p>
<p>在启动前台服务的时候一定要给一个Notification，那我可不可以在启动前台服务后，调用NotificationManager的cancelNotification把这个Notification给取消掉呢？来看看源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在NotificationManagerService.java中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelNotificationWithTag</span><span class="params">(String pkg, String tag, <span class="keyword">int</span> id, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        checkCallerIsSystemOrSameApp(pkg);</span><br><span class="line">        userId = ActivityManager.handleIncomingUser(Binder.getCallingPid(),</span><br><span class="line">                Binder.getCallingUid(), userId, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"cancelNotificationWithTag"</span>, pkg);</span><br><span class="line">        <span class="comment">// Don't allow client applications to cancel foreground service notis.</span></span><br><span class="line">        cancelNotification(pkg, tag, id, <span class="number">0</span>,</span><br><span class="line">                Binder.getCallingUid() == Process.SYSTEM_UID</span><br><span class="line">                ? <span class="number">0</span> : Notification.FLAG_FOREGROUND_SERVICE, <span class="keyword">false</span>, userId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现函数的声明，如果在mustNotHaveFlags里面，请求会被直接弹掉，通知不会被取消。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">cancelAllNotificationsInt</span><span class="params">(String pkg, <span class="keyword">int</span> mustHaveFlags,</span><br><span class="line">            <span class="keyword">int</span> mustNotHaveFlags, <span class="keyword">boolean</span> doit, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>从中间可以看到，对于不是系统UID的用户来说，如果Notification带有FLAG_FOREGROUND_SERVICE标记，你是取消不掉的，这类通知只有系统能取消，而给用户的唯一入口就是<code>Service#stopForegroundService</code>，在调用这个接口的时候，会将前台状态置为false，如果传入参数为true，再同时把Notification给cancel掉。看似没有漏洞，然而聪(jian)明(zha)的人还是很多很多的。stop是单向的先取消前台状态，然后cancel notification。也就是说，cancel的时候就不会再去修改service的状态了。所以，假如我同时启动<em>两个</em>service，并且将他们同时置为前台状态，然后<em>共享同一个NotificationID</em>，也是就说，此时会出现两个前台服务，但通知管理器里只有一个关联的通知。 这时我们在其中一个服务中调用 <code>stopForeground(true)</code>，这个服务前台状态会被取消，同时状态栏通知也被移除。 <code>*BUTTTTT！</code>* 另外一个服务呢？他并没有受到影响，还是前台服务状态，但是此时，状态栏通知已经没了！ 这就是支付宝的黑科技。</p>
<p>下面是一个示例程序，Service名字就叫AlipayService啦: <a href="https://github.com/jezhee/sneaky_foreground_service" target="_blank" rel="external">sneaky_foreground_service</a>. 第一个图里面那个和支付宝一起不会被干掉的就是它了。支付宝的service因为还被其他进程绑定，所以显示 服务正在被 支付宝 使用， 而这个Circles纯粹是演示用，就懒得整了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>近期支付宝升级到了9.0，除了加入微信功能外，还新增了金钟罩功能，不要说普通的各种加速球，火箭神马的不能杀死他外，连格外牛逼的绿色守护也奈何不了他。在绿色守护里面，支付宝始终显示为“服务正在被 支付宝 使用”，不会自动休眠，恼火死了。那么问题来了，他是怎么做到的呢？<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://weixinfu.com/tags/Android/"/>
    
      <category term="黑科技" scheme="http://weixinfu.com/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于Github pages使用hexo建立本博客的步骤记录]]></title>
    <link href="http://weixinfu.com/2015/07/15/Road_to_Build_Site/"/>
    <id>http://weixinfu.com/2015/07/15/Road_to_Build_Site/</id>
    <published>2015-07-15T13:47:17.000Z</published>
    <updated>2015-07-30T15:18:14.000Z</updated>
    <content type="html"><![CDATA[<p>github pages目前看起来是程序员最喜欢的建静态博客的方法了。本文记录一下我建这个博客的过程，留备查看。</p>
<a id="more"></a>
<h1 id="github开分支">github开分支</h1><p>一般个人使用的博客都不是和项目相关的，因此需要新建一个 ${github username}.github.io的项目，并将master分支作为建站主分支。注意，是github<em>.io</em>，不是 <em>.com</em>。</p>
<h1 id="使用hexo建网站框架">使用hexo建网站框架</h1><p>参考 <a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a>。</p>
<p>不过其中部署到github的代码有疏漏，要部署到github，需要先安装git插件：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>部署的代码也要改改，没有github这种type，需要改为如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">	<span class="attribute">type</span>: git</span><br><span class="line">	<span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:jezhee/jezhee.github.io.git</span><br><span class="line">	<span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>
<h1 id="添加站内搜索">添加站内搜索</h1><p>使用百度的站内搜索貌似限制颇多，对我这个完全不懂前端，就想写写markdown的人来说略麻烦。</p>
<p>使用的是jerryfu推荐的swifytype方案: <a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype.html" target="_blank" rel="external">利用swiftype为hexo添加站内搜索</a>.</p>
<h1 id="图床">图床</h1>]]></content>
    <summary type="html">
    <![CDATA[<p>github pages目前看起来是程序员最喜欢的建静态博客的方法了。本文记录一下我建这个博客的过程，留备查看。</p>]]>
    
    </summary>
    
      <category term="github" scheme="http://weixinfu.com/tags/github/"/>
    
      <category term="hexo" scheme="http://weixinfu.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 5.0的坑]]></title>
    <link href="http://weixinfu.com/2015/07/13/Android%205.0%E7%9A%84%E5%9D%91/"/>
    <id>http://weixinfu.com/2015/07/13/Android 5.0的坑/</id>
    <published>2015-07-13T13:47:17.000Z</published>
    <updated>2015-07-30T15:17:44.000Z</updated>
    <content type="html"><![CDATA[<p>从用户角度讲，Android L算的上有屎以来最棒的Android系统，无论外观，还是性能，android 5都绝对是最高点。相较于它的前辈们，各方面的提升都相当明显。从体验上讲，离iOS距离越来越近了。当然，如果不是操蛋的墙，使得google service除了耗电别无二用的话， 这个距离还可以更小。</p>
<p>然而，不是一切都是美好。比如对于码农来讲，新的系统出来，老的代码就必然就会伴随着一番折腾。下面我们就来挑几个说说。</p>
<a id="more"></a>
<h1 id="控件透明的判断">控件透明的判断</h1><p>以前显示的好好的头像突然不对了。我们的头像学着ios的风格，都裁剪成了圆形，做法比较简单，重载BitmapDrawable的draw方法，做一些运算即可。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    copyBounds(bounds);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// new layer</span></span><br><span class="line">    canvas.saveLayer(<span class="keyword">new</span> RectF(bounds), <span class="keyword">null</span>, Canvas.ALL_SAVE_FLAG);</span><br><span class="line">    <span class="keyword">super</span>.draw(canvas); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// makeup</span></span><br><span class="line">    paint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.DST_IN));</span><br><span class="line">    canvas.drawBitmap(mask, <span class="keyword">null</span>, bounds, paint); <span class="comment">// mask是一个圆形罩图</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// apply layer</span></span><br><span class="line">    canvas.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在之前，这段简单的代码一直勤勤恳恳的工作，没有出过任何差错。可到了5.0，原本透明的圆形外框变成黑色了。界面刚打开时，还能透过黑色看到后面的luancher背景。开始时以为是硬件加速的原因，把控件由软加速改为了硬件加速，确实，黑框消失了，变正常了，但由于另外一个地方用到了更复杂的剪切和叠加，整个列表滑动变的异常迟滞，只好又改回来。然后我又尝试预先就把图片处理好，创建BitmapDrawable的时候直接赋给它，发现是正常的。后面做调试跟踪，一级级的查下去，突然发现Drawable有个getOpacity方法，这这里返回的居然是PixelFormat.OPAQUE。一想，肯定就是这里了。画到画布上的alpha通道直接被丢弃掉了啊，因为我们传给构造函数的Bitmap是RGB565格式的，默认认为你这个就是没有alpha通道，所以不需要！看看说明，这个方法就是可以重载的。于是，强制返回TRANSLUCENT，OK了。 在自定义Drawable中载入如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOpacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PixelFormat.TRANSLUCENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="WebView花屏">WebView花屏</h1><p>在有scrollview的页面，偶尔发现界面花掉了，有时候是像电视没了信号的麻花，有些地方又是界面画的错乱了，特别是点ActionBar上的返回按钮时，特别容易出现。这他妈真的是完全无处可查啊。最后只好svn一个版本一个版本的回滚，耗费大量时间不停的尝试（因为TMD还是偶现啊！），终于找到了一点点踪迹，自从那个版本在首页某一帧加了一个webview之后，只要那个webview调过loadUrl，后面花屏就必现。但什么原因，还是无从知晓，我们什么都没干啊。这玩意拖了很久，后来某一天看android的硬件加速文档时，突发奇想，不会跟这有关系吧？赶紧去把那个webview的硬件加速给关了，再一跑，真的不出现了。这尼玛，坑爹啊。反正给解决了。过两天给google提bug去。</p>
<h1 id="bound_service">bound service</h1><p>偶现有service在后台跑着跑着就挂了，后面再怎么调startService都爬不起来。根据log可以看到，service的宿主进程的Application的onCreate方法已经被调用，有没有跑完待定。但service的onCreate方法却没有调用到。</p>
<p>本来以为这是5.0的坑，后来才发现，原来从4.4就已经有了，原因是系统在停掉service时，状态清理出了问题。具体原因另说吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从用户角度讲，Android L算的上有屎以来最棒的Android系统，无论外观，还是性能，android 5都绝对是最高点。相较于它的前辈们，各方面的提升都相当明显。从体验上讲，离iOS距离越来越近了。当然，如果不是操蛋的墙，使得google service除了耗电别无二用的话， 这个距离还可以更小。</p>
<p>然而，不是一切都是美好。比如对于码农来讲，新的系统出来，老的代码就必然就会伴随着一番折腾。下面我们就来挑几个说说。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://weixinfu.com/tags/Android/"/>
    
      <category term="陷阱" scheme="http://weixinfu.com/tags/%E9%99%B7%E9%98%B1/"/>
    
  </entry>
  
</feed>